# Generated by Django 2.2 on 2019-10-24 02:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Biome",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                (
                    "pogo",
                    models.PositiveIntegerField(
                        blank=True, db_column="PoGo", null=True
                    ),
                ),
            ],
            options={"db_table": "biome"},
        ),
        migrations.CreateModel(
            name="BodyPlan",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(blank=True, max_length=50, null=True)),
                ("notes", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={"db_table": "body_plan"},
        ),
        migrations.CreateModel(
            name="EggGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                ("notes", models.CharField(blank=True, max_length=199, null=True)),
                (
                    "stadium2name",
                    models.CharField(
                        blank=True, db_column="Stadium2name", max_length=20, null=True
                    ),
                ),
            ],
            options={"db_table": "egg_group"},
        ),
        migrations.CreateModel(
            name="Generation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("region", models.CharField(db_column="Region", max_length=12)),
                (
                    "games",
                    models.CharField(
                        blank=True, db_column="Games", max_length=111, null=True
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True, db_column="Note", max_length=111, null=True
                    ),
                ),
            ],
            options={"db_table": "generations"},
        ),
        migrations.CreateModel(
            name="GoWeather",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_column="Name", max_length=20)),
                (
                    "emoji",
                    models.CharField(
                        blank=True, db_column="Emoji", max_length=8, null=True
                    ),
                ),
            ],
            options={"db_table": "GO_weather"},
        ),
        migrations.CreateModel(
            name="PokeCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=22, unique=True)),
                ("note", models.CharField(blank=True, max_length=111, null=True)),
            ],
            options={"db_table": "zc_pkmn_cat"},
        ),
        migrations.CreateModel(
            name="Type",
            fields=[
                ("name", models.CharField(max_length=55, unique=True)),
                ("glitch", models.BooleanField(default=True)),
                ("note", models.CharField(blank=True, max_length=111, null=True)),
                ("emoji", models.CharField(blank=True, max_length=8, null=True)),
                (
                    "id",
                    models.IntegerField(
                        db_column="id", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={"db_table": "type_list"},
        ),
        migrations.CreateModel(
            name="TypeEffectivenessRating",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.CharField(max_length=23)),
                ("dmg_multiplier", models.FloatField()),
                ("pogodamage", models.FloatField(db_column="PoGoDamage")),
                ("oldpogodamage", models.FloatField(db_column="oldPoGoDamage")),
                ("defense_desc", models.CharField(blank=True, max_length=23)),
            ],
            options={"db_table": "type_effectiveness_ratings"},
        ),
        migrations.CreateModel(
            name="TypeEffectiveness",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="django_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "dtype",
                    models.ForeignKey(
                        db_column="dtype",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="defensive_type",
                        to="speciesinfo.Type",
                    ),
                ),
                (
                    "otype",
                    models.ForeignKey(
                        db_column="otype",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="offensive_type",
                        to="speciesinfo.Type",
                    ),
                ),
                (
                    "relation",
                    models.ForeignKey(
                        blank=True,
                        db_column="relation",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="speciesinfo.TypeEffectivenessRating",
                    ),
                ),
            ],
            options={
                "db_table": "type_effectiveness",
                "unique_together": {("otype", "dtype")},
            },
        ),
        migrations.AddField(
            model_name="type",
            name="AtkEffectiveness",
            field=models.ManyToManyField(
                related_name="attack_effects",
                through="speciesinfo.TypeEffectiveness",
                to="speciesinfo.Type",
            ),
        ),
        migrations.AddField(
            model_name="type",
            name="weather_boost",
            field=models.ForeignKey(
                blank=True,
                db_column="weather_boost",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="speciesinfo.GoWeather",
            ),
        ),
        migrations.CreateModel(
            name="Ability",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_column="Name", max_length=50)),
                ("effect", models.CharField(db_column="Effect", max_length=333)),
                (
                    "note",
                    models.CharField(
                        blank=True, db_column="Note", max_length=99, null=True
                    ),
                ),
                (
                    "generation",
                    models.ForeignKey(
                        blank=True,
                        db_column="Generation",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="speciesinfo.Generation",
                    ),
                ),
            ],
            options={"db_table": "ability"},
        ),
        migrations.CreateModel(
            name="Pokemon",
            fields=[
                ("form", models.CharField(max_length=11)),
                ("dex_number", models.IntegerField(db_column="#")),
                (
                    "name",
                    models.CharField(
                        db_column="Name",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "total",
                    models.IntegerField(blank=True, db_column="Total", null=True),
                ),
                ("hp", models.IntegerField(db_column="HP")),
                ("attack", models.IntegerField(db_column="Attack")),
                ("defense", models.IntegerField(db_column="Defense")),
                ("sp_atk", models.IntegerField(db_column="SpAtk")),
                ("sp_def", models.IntegerField(db_column="SpDef")),
                ("speed", models.IntegerField(db_column="Speed")),
                (
                    "evolved_from",
                    models.IntegerField(db_column="evolved_from", default=0),
                ),
                ("pogo_nerf", models.BooleanField(db_column="PoGoNerf", default=False)),
                ("wt_kg", models.FloatField()),
                ("ht_m", models.FloatField()),
                (
                    "official_color",
                    models.CharField(
                        blank=True, db_column="OfficialColor", max_length=11, null=True
                    ),
                ),
                (
                    "description_category",
                    models.CharField(blank=True, max_length=13, null=True),
                ),
                ("nicknames", models.CharField(blank=True, max_length=88, null=True)),
                ("notes", models.CharField(blank=True, max_length=333, null=True)),
                (
                    "nia_cust_hp",
                    models.IntegerField(blank=True, db_column="NIA_cust_HP", null=True),
                ),
                (
                    "nia_cust_atk",
                    models.IntegerField(
                        blank=True, db_column="NIA_cust_ATK", null=True
                    ),
                ),
                (
                    "nia_cust_def",
                    models.IntegerField(
                        blank=True, db_column="NIA_cust_DEF", null=True
                    ),
                ),
                (
                    "ability1",
                    models.ForeignKey(
                        blank=True,
                        db_column="Ability1",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="main_ability",
                        to="speciesinfo.Ability",
                    ),
                ),
                (
                    "ability2",
                    models.ForeignKey(
                        blank=True,
                        db_column="Ability2",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="alternate_ability",
                        to="speciesinfo.Ability",
                    ),
                ),
                (
                    "body_plan",
                    models.ForeignKey(
                        blank=True,
                        db_column="Body_Plan",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="speciesinfo.BodyPlan",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        db_column="catnum",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="speciesinfo.PokeCategory",
                    ),
                ),
                (
                    "egg1",
                    models.ForeignKey(
                        blank=True,
                        db_column="EG1",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="egg_group_1",
                        to="speciesinfo.EggGroup",
                    ),
                ),
                (
                    "egg2",
                    models.ForeignKey(
                        blank=True,
                        db_column="EG2",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="egg_group_2",
                        to="speciesinfo.EggGroup",
                    ),
                ),
                (
                    "generation",
                    models.ForeignKey(
                        blank=True,
                        db_column="Generation",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="speciesinfo.Generation",
                    ),
                ),
                (
                    "habitat",
                    models.ForeignKey(
                        blank=True,
                        db_column="habitat",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="speciesinfo.Biome",
                    ),
                ),
                (
                    "hidden_ability",
                    models.ForeignKey(
                        blank=True,
                        db_column="HiddenAbility",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="hidden_ability",
                        to="speciesinfo.Ability",
                    ),
                ),
                (
                    "previous_evolution",
                    models.ForeignKey(
                        db_column="ef_fk_dj",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="evolves_to",
                        to="speciesinfo.Pokemon",
                    ),
                ),
                (
                    "type1",
                    models.ForeignKey(
                        blank=True,
                        db_column="Type1num",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="primary_type",
                        to="speciesinfo.Type",
                    ),
                ),
                (
                    "type2",
                    models.ForeignKey(
                        blank=True,
                        db_column="Type2num",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="alternate_type",
                        to="speciesinfo.Type",
                    ),
                ),
            ],
            options={
                "db_table": "pokémon",
                "unique_together": {("dex_number", "form")},
            },
        ),
    ]
